---
consumes:
- application/json
swagger: '2.0'
basePath: "/"
securityDefinitions:
  basicAuth:
    in: header
    name: Authorization
    type: basic
    description: HTTP Basic Authentication. Works over `HTTPS` only
schemes:
- https
produces:
- application/json
- application/vnd.simplyrets-v0.1+json
host: api.simplyrets.com
info:
  version: 1.0.0
  title: SimplyRETS API
  description: |
    The SimplyRETS API is an exciting step towards making it easier for
    developers and real estate agents to build something awesome with
    real estate data!

    The documentation below makes live requests to our API using the trial
    data. To get set up with the API using live RETS data, you must have
    RETS credentials from your RETS vendor or MLS, which you can then use
    to create an app with SimplyRETS. For more information on that
    process, please see our [FAQ](https://simplyrets.com/faq), [Getting
    Started](https://simplyrets.com/blog/getting-set-up.html) page, or
    [contact us](https://simplyrets.com/\#home-contact).

    Below you'll find the API endpoints, query parameters, response bodies,
    and other information about using the SimplyRETS API. You can run
    queries by clicking the 'Try it Out' button at the bottom of each
    section.

    ### Authentication
    The SimplyRETS API uses Basic Authentication. When you create an
    app, you'll get a set of API credentials to access your
    listings. If you're trying out the test data, you can use
    `simplyrets:simplyrets` for connecting to the API.

    ### Media Types
    The SimplyRETS API uses the `Accept` header to allow clients to
    control media types (content versions). We maintain backwards
    compatibility with API clients by allowing them to specify a
    content version. We highly recommend setting and explicity media
    type when your application reaches production. Both the structure
    and content of our API response bodies is subject to change so we
    can add new features while respecting the stability of applications
    which have already been developed.

    To always use the latest SimplyRETS content version, simply use
    `application/json` in your application `Accept` header.

    If you want to pin your clients media type to a specific version,
    you can use the vendor-specific SimplyRETS media type, e.g.
    `application/vnd.simplyrets-v0.1+json"`

    To view all valid content-types for making an `OPTIONS`, make a
    request to the SimplyRETS api root

    `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`

    The default media types used in our API responses may change in the
    future. If you're building an application and care about the
    stability of the API, be sure to request a specific media type in the
    Accept header as shown in the examples below.

    The wordpress plugin automatically sets the `Accept` header for the
    compatible SimplyRETS media types.

    ### Pagination

    To paginate through listings, start your query with these
    parameters: 'limit=500&lastId=0'. The 'lastId' is the important
    part, you can use any limit up to 500. When you receive the
    response from the API with the results, check the 'Link' header for
    the 'next' link. That link is pre-built to access the next 'page'
    of listings. Alternatively, you can use the last listing's 'mlsId'
    from the previous request and use that in the next query. For
    example:

    First query:

    curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'

    If the 'mlsId' in the last listing of the results is '1234567', then the next query will be:

    curl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'

    ...and so one until you have reached the final page of listings.

    There a few pieces of useful information about each request stored
    in the HTTP Headers:

    - `X-Total-Count` shows you the total amount of listings that match
      your current query.
    - `Link` contains pre-built pagination links for accessing the next
    'page' of listings that match your query.

    ### RETS Vendor Compliance

    Many RETS vendors and MLSs have strict requirements for showing
    disclaimers with specific information embedded. For example, in many
    areas it's required to show the timestamp of the time the listings
    were refreshed inside a disclaimer or on a listing page.

    The timestamp of the last listing refresh timestamp can be found in
    one of two spots:

    - The `X-SimplyRETS-LastUpdate` header from `GET /properties` or `GET /properties/{mlsId}`

    - Calling the API root `/` or properties api endpoint `/properties`
      with an OPTIONS request

      - `OPTIONS /`

        This request will show the last update timestamp for all RETS
        vendors associated with your application. Look for the
        `updates` list in the JSON response.

      - `OPTIONS /properties`

        Using this request, look for the `lastUpdate` field in the JSON
        response.
definitions:
  Room:
    type: object
    description: Sales Data
    properties:
      length:
        format: float
        type: number
      featuers:
        type: string
        description: A set of features in the room.
      area:
        format: float
        type: number
        description: The area of the room in units provided by the RETS vendor.
      width:
        format: float
        type: number
      typeText:
        type: string
        description: |
          Entire raw value of of the room `Type` data provided in the
          RETS feed.
      type:
        type: string
        description: The `RoomType` RESO Data Dictionary 1.6 type.
      dimensions:
        type: string
        description: Room dimension textual value.
      description:
        type: string
        description: A description of the room.
  StreetAddress:
    type: object
    description: RETS Street Address
    properties:
      crossStreet:
        type: string
        description: Known cross street
      state:
        type: string
        description: State or province. Maps to the data dictionary field `StateOrProvince`.
      country:
        type: string
        description: Street address country (United States or Canada)
      postalCode:
        type: string
        description: Street Address postal code
      streetName:
        type: string
        description: Name of the street
      streetNumberText:
        type: string
        description: |
          Textual representation of the street number. This field
          is usually redundant with what's in `streetNumber` but is
          occassionally usefuly for street number which are actually
          alpha-numerical. For example, "N63453" or "34556B".

          **Added on 2016/05/02**
      city:
        type: string
        description: City name
      streetNumber:
        format: int64
        type: integer
        description: Street number
      full:
        type: string
        description: Full pretty-printed address with suffix (if available)
  Property:
    type: object
    description: Rets Listing Property
    properties:
      rooms:
        schema:
          items:
            "$ref": "#/definitions/Room"
          type: array
        description: |
          A comprehensive list of rooms. Room data is not included in the
          standard payload.  Use `include=rooms` in your query to include
          room data. If the list of rooms is empty, your RETS vendor may
          not supply this information with your RETS feed.

          This data is populated from 2 sources:

            1. Inline room mappings in the `Property` resource

            2. In an external RETS resource (e.g. `Room`)
      roof:
        type: string
        description: Property roof description
      cooling:
        type: string
        description: A description of the cooling or air conditioning features of
          the property.
      style:
        type: string
        description: Property style description or short string
      area:
        format: int64
        type: integer
        description: Square footage of the building associated with a listing
      bathsFull:
        format: int64
        type: integer
        description: Number of full bathrooms
      bathsHalf:
        format: int64
        type: integer
        description: Number of half bathrooms
      stories:
        format: float
        type: number
        description: |
          Number of stories or levels. Represented as a `double' to
          account for half stories.
      fireplaces:
        format: int64
        type: integer
        description: Number of fireplaces
      flooring:
        type: string
        description: The type(s) of flooring found within the property.
      heating:
        type: string
        description: Heating description or short string
      foundation:
        type: string
      poolFeatures:
        type: string
      laundryFeatures:
        type: string
      occupantName:
        type: string
      ownerName:
        type: string
      lotDescription:
        type: string
      lotSizeAcres:
        format: float
        type: number
        description: |
          Lot size in acres

          **Added on 2016/05/04 - Not available for all RETS vendors**
      subType:
        type: string
        enum:
          - Apartment
          - BoatSlip
          - SingleFamilyResidence
          - DeededParking
          - Cabin
          - Condominium
          - Duplex
          - ManufacturedHome
          - Quadruplex
          - StockCooperative
          - Townhouse
          - Timeshare
          - Triplex
          - ManufacturedOnLand
        description: 'A normalized representation of the listings sub-type.'
      bedrooms:
        format: int64
        type: integer
        description: Number of bedrooms
      interiorFeatures:
        type: string
        description: The properties interior features
      lotSize:
        type: string
        description: |
          Lot size dimensions or square footage as a text. This
          field is generally used to show the pretty formatted
          lot size.
      areaSource:
        type: string
      maintenanceExpense:
        format: float
        type: number
        description: Yearly maintenance expense
      additionalRooms:
        type: string
        description: |
          Additional room information. This is a textual description
          of additional rooms for the listing.
      exteriorFeatures:
        type: string
        description: 'Exterior Features for the listing'
      water:
        type: string
        description: |
          The name, if known, of the body of water on which the
          property is located. (E.g., lake name, river name, ocean
          name, sea name, canal name). Otherwise, this field will
          contain features of the waterfront on which the property is
          located.
      view:
        type: string
        description: View details and description
      lotSizeArea:
        format: float
        type: number
        description: |
          The total area of the lot.  See `lotSizeUnits` for the units
          of measurement (Square Feet, Square Meters, Acres, etc.).

          **Added on 2016/05/04 - Not available for all RETS vendors**
      subdivision:
        type: string
        description: The subdivision or community name
      construction:
        type: string
        description: The materials that were used in the construction of the property.
      subTypeRaw:
        type: string
        description: 'The raw text representation of the property sub type.'
      parking:
        "$ref": "#/definitions/Parking"
      lotSizeAreaUnits:
        type: string
        description: |
          Unit of measurement for the lotSizeArea field.  e.g. Square
          Feet, Square Meters, Acres, etc.

          If this field is `null` the units is the default unit
          of measure specified by your RETS provider.

          **Added on 2016/05/04 - Not available for all RETS vendors**
      type:
        type: string
        enum:
          - RES
          - CND
          - RNT
          - MLF
          - CRE
          - LND
          - FRM
        description: |
          Abbreviated property type. RES is Residential, CND is CondoOrTownhome,
          RNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land,
          FRM is Farm. See the `propertySubType` field for more information.
      garageSpaces:
        format: float
        type: number
        description: Number of garage spaces
      bathsThreeQuarter:
        format: int64
        type: integer
        description: Number of 3/4 bathrooms
      accessibility:
        type: string
      occupantType:
        type: string
      yearBuilt:
        format: int64
        type: integer
        description: Year the property was built
  Listing:
    type: object
    description: RETS Listing Property
    properties:
      privateRemarks:
        type: string
        description: Agent only remarks
      property:
        "$ref": "#/definitions/Property"
        description: Specific property data associated with listing.
      mlsId:
        format: int64
        type: integer
        description: |
          A unique identifier for this listing specific to the
          SimplyRETS API. Thie identifier is specific to the
          SimplyRETS api and has no correlation with the MLS
          number. Use this id when making requests to the single
          listing endpoint (eg, `/properties/{mlsId}`).

          Applications should not rely on specific `mlsId`s being
          present. Instead, apps should dynamically use the `mlsId`
          after using other more general query parameters. Many mls
          vendors require listings which are expired, terminated or
          sold to be purged, which will render calls to specific
          `mlsId`s to return nothing (or possibly a 404).
      showingInstructions:
        type: string
        description: Public instructions for showing the property.
      showingContactName:
        type: string
        description: The name of the contact for the showing of the listed property.
      showingContactPhone:
        type: string
        description: Telephone number that should be called to arrange showing the property.
      office:
        "$ref": "#/definitions/Office"
        description: Listing office or brokerage.
      leaseTerm:
        type: string
        description: Represents the length of the lease.
      disclaimer:
        type: string
        description: |
          Data accuracy disclaimer. The value in the disclaimer may
          change depending on the rules imposed by your RETS vendors.
      address:
        "$ref": "#/definitions/StreetAddress"
        description: Comprehensive property address information
      listDate:
        format: date-time
        type: string
        description: Date and time the listing became Active
      agent:
        "$ref": "#/definitions/Agent"
        description: Comprehensive listing agent information
      modified:
        format: date-time
        type: string
        description: Date and time of the last modification
      school:
        "$ref": "#/definitions/School"
        description: Comprehensive school zone data
      photos:
        items:
          type: string
        type: array
        description: |
          Photos of the property. Images are served over https and are
          suitable for production use on secure websites
      listPrice:
        format: double
        type: number
        description: Price of the listing
      listingId:
        type: string
        description: |
          Data Dictionary v1.3 ListingId. The well known identifier for
          the listing. The value is the id or number by the RETS vendor
          as a public identifier for the listing.

          This identifier should not be confused with the `mlsId`, which is
          specific to the SimplyRETS API.
      mls:
        "$ref": "#/definitions/MlsInformation"
        description: RETS vendor information and data
      geo:
        "$ref": "#/definitions/GeographicData"
        description: Geographic data for the listing
      tax:
        "$ref": "#/definitions/Tax"
        description: Associate tax data
      coAgent:
        "$ref": "#/definitions/Agent"
        description: |
          co-listing agent information.

          *NOTE*: If your RETS feed stores co-list information outside
          of the `Property` resource, co-list agent information will not
          be available.
      sales:
        "$ref": "#/definitions/Sales"
        description: Sales data
      leaseType:
        type: string
        description: Information about the status of the existing lease on the property.
      virtualTourUrl:
        type: string
        description: |
          The URL for an unbranded virtual tour of the property.

          **Added on 2016/05/04 - Not available for all RETS vendors**
      remarks:
        type: string
        description: Description or remarks
      association:
        "$ref": "#/definitions/Association"
  OpenHouse:
    type: object
    description: SimplyRETS Open House object
    properties:
      refreshments:
        type: string
        description: Provided
      listing:
        "$ref": "#/definitions/Listing"
        description: The full listing associated with the OpenHouse
      startTime:
        format: date-time
        type: string
        description: Start Date for the open house
      inputId:
        description: |
          The MLS number for the showing agent or agent which created the
          OpenHouse in the RETS database.
      openHouseKey:
        type: string
        description: |
          A unique identifier for the open house which is specific to the
          SimplyRETS API
      endTime:
        format: date-time
        type: string
        description: The ending date time for the open house
      openHouseId:
        type: string
        description: 'The MLS number or id provided by the RETS vendor or MLS.'
      type:
        type: string
        description: The open house type. For example, Public or Private
      description:
        type: string
        description: The remarks and/or description details for the open house
  Office:
    type: object
    description: RETS Office
    properties:
      contact:
        "$ref": "#/definitions/ContactInformation"
        description: |
          Associated contact details for the office. The availability of this
          information depends on your RETS vendor's rules and regulations

          *Contact information is not available for all RETS Vendors.*
      name:
        type: string
        description: Pimary office name
      servingName:
        type: string
        description: Primary office or brokerage name
      brokerid:
        type: string
        description: |
          Office or brokerage MLS identifier

          **Not available for all RETS vendors**
  Error:
    type: object
    description: Error information
    properties:
      error:
        format: int32
        type: integer
        description: |
          Error code. In general, we try to adhere to HTTP status code
          and use these error statuses for detailed reporting.
      message:
        type: string
        description: Status message with an explanation of the error
  Agent:
    type: object
    description: SimplyRETS Agent Api
    properties:
      lastName:
        type: string
        description: Agent last name
      contact:
        "$ref": "#/definitions/ContactInformation"
        description: |
          Agent contact info. This information is only present when
          your RETS feed specifies the agent wishes to show their
          contact information publicly.

          *Contact information is not available for all RETS Vendors.*
      firstName:
        type: string
        description: Agent first name
      id:
        type: string
        description: Well known Agent MLS number or id.
  School:
    type: object
    description: RETS School Data
    properties:
      middleSchool:
        type: string
        description: Middle or junior school name
      highSchool:
        type: string
        description: High school name
      elementarySchool:
        type: string
        description: Elementary school name.
      district:
        type: string
        description: School district name.
  ContactInformation:
    type: object
    description: RETS Contact Information
    properties:
      email:
        type: string
        description: |
          The email address of the `ContactInformation`

          **Not available for all RETS vendors**
      office:
        type: string
        description: |
          Contact Information Office Phone Number

          **Not available for all RETS vendors**
      cell:
        type: string
        description: |
          Contact Information Cell Phone

          **Not available for all RETS vendors**
  Tax:
    type: object
    description: RETS Tax Data
    properties:
      taxYear:
        format: int64
        type: integer
        description: Tax Year
      taxAnnualAmount:
        type: string
        description: Annual tax amount in USD
      id:
        type: string
        description: Tax Parcel ID for the listing
  Parking:
    type: object
    description: RETS School Data
    properties:
      leased:
        type: string
      spaces:
        type: integer
        description: Number of parking spaces
      description:
        type: string
        description: Parking features description
  Sales:
    type: object
    description: Sales Data
    properties:
      closeDate:
        format: date-time
        type: string
        description: RETS Sales data close date
      office:
        type: string
        description: RETS Sales data selling office/brokerage id
      closePrice:
        format: int64
        type: integer
        description: RETS Sales data sold price
      agent:
        type: string
        description: RETS Sales data agent id
      contractDate:
        format: date-time
        type: string
        description: RETS Sales data contract date
  GeographicData:
    type: object
    description: RETS Geographic Data
    properties:
      county:
        type: string
        description: Listing county
      lat:
        format: double
        type: number
        description: Listing latitude (if available)
      lng:
        format: double
        type: number
        description: Listing longitude (if available)
      marketArea:
        type: string
        description: Listing GeoMarket area. May be the same as mlsArea
      directions:
        type: string
        description: Directions to the property
  Broker:
    type: object
    description: SimplyRETS Broker Api
    properties:
      startdate:
        format: date-time
        type: string
        description: Start Date
  MlsInformation:
    type: object
    description: RETS Vendor Data
    properties:
      status:
        type: string
        enum:
          - Active
          - ActiveUnderContract (Backup-Offer)
          - Pending
          - Hold
          - Withdrawn
          - Closed
          - Expired
          - Delete
          - Incomplete
          - ComingSoon
        description: |

          Normalized [RESO Data Dictionary 1.6]() standard status value. Compliant with data dictionary
          v1.6 `ListingStatus`. Listing status availability depends on your RETS vendor's
          availability. Below is a brief description of each status
          with possible synonyms which may map to your MLS-specific
          statuses

          - Active: Active Listing which is still on the market
          - ActiveUnderContract: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent
          - Pending: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract
          - Hold: The listing has been withdrawn from the market, but a contract
            still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market
          - Withdrawn: The listing has been withdrawn from the market, but a contract
            still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market
          - Closed: The purchase agreement has been fulfilled or the lease
            agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale
          - Expired: The listing contract has expired
          - Delete: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap
          - Incomplete: The listing has not yet be completely entered and is not yet
            published in the MLS. Synonyms: Draft, Partially Complted
          - ComingSoon
      area:
        type: string
        description: MLS Area major. The major marketing area name, as defined by
          the MLS or other non-governmental organization.
      daysOnMarket:
        format: int64
        type: integer
        description: Amount of days the property has been Active
      originatingSystemName:
        type: string
        description: |
          Alias for the listing office or brokerage

          This field corresponds to the data-dictionary `OriginatingSystemName` field

          The name of the originating record provider.  Most commonly
          the name of the MLS. The place where the listing is
          originally input by the member.  The legal name of the
          company.  To be used for display.

          If you're data provider aggregates feeds from multiple other
          RETS vendors, this will be the name of the originating RETS
          vendor.
      statusText:
        type: string
        description: |
          Raw MLS status text. This `field` comes directly from your RETS data
          field and is not normalized.
      areaMinor:
        type: string
        description: MLS Area minor. The minor/sub marketing area name, as defined
          by the MLS or other non-governmental organization.
  Association:
    type: object
    description: Home Owners Association
    properties:
      fee:
        type: integer
        description: Association fee
      name:
        type: string
        description: Name of the association
      amenities:
        type: string
        description: Any extra amenities granted by the HOA
paths:
  "/openhouses":
    get:
      summary: The SimplyRETS OpenHouses API
      responses:
        '403':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Authorization Required`.
        '400':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Bad Request`.
        '429':
          schema:
            "$ref": "#/definitions/Error"
          description: |
            Will send `Too Many Requests`. Please see our Service
            Level Agreement for more information on Request Rates and
            Acceptable Use.
        '200':
          schema:
            items:
              "$ref": "#/definitions/OpenHouse"
            type: array
          description: |
            Will send `Authenticated` if authentication is succesful,
            otherwise it will send `Unauthorized`.
        '500':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Internal Server Error`.
        '401':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Authentication Required`.
      parameters:
      - required: false
        in: query
        name: type
        collectionFormat: multi
        type: string
        enum:
          - residential
          - rental
          - multifamily
          - condominium
          - commercial
          - land
          - farm
        description: |
          Request listings by a specific property type. This
          defaults to Residential, and you can only specify one type
          in a single query.
      - required: false
        in: query
        name: listingId
        type: string
        description: 'Request openhouses for a specific `listingId`.'
      - items:
          type: string
        required: false
        in: query
        name: cities
        collectionFormat: multi
        type: array
        description: |
          Filter the openhouses returned by a list of valid cities.

          The `cities` query parameter is case-insensitive.

          The list of `cities` provided by your RETS vendor or MLS can
          be seen by sending an `OPTIONS` request to the `/properties`
          endpoint:

          `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/openhouses`
      - items:
          type: string
        required: false
        in: query
        name: brokers
        collectionFormat: multi
        type: array
        description: |
          Filter the listings returned by brokerage with a Broker ID.
          You can specific multiple broker parameters. Note, the Broker
          ID is provided by your RETS vendor or MLS.
      - required: false
        in: query
        name: agent
        type: string
        description: |
          Filter the listings returned by an agent ID.  Note, the
          Agent ID is provided by your RETS vendor or MLS.
      - required: false
        in: query
        name: minprice
        type: integer
        description: 'Filter listings by a minimum price.'
      - format: date-time
        in: query
        name: startdate
        type: string
        description: Scheduled date and time of the open house showing
      - required: false
        in: query
        name: offset
        type: integer
        description: |
          Increase the offset parameter by the limit to go to the
          next "page" of listings. Also take a look at the Link HTTP
          Header for pre-built pagination.

          *NOTE:* Use the `lastId` parameter for pagination.
      - required: false
        in: query
        name: lastId
        type: integer
        description: 'Used as a cursor for pagination.'
      - required: false
        in: query
        name: limit
        type: integer
        description: |
          Set the number of listings to return in the response.
          This defaults to 20 listings, and can be a maximum of 500.
          To paginate through to the next page of listings, take a
          look at the `offset` parameter, or the Link in the HTTP
          Header.
      - required: false
        in: query
        name: sort
        type: string
        enum:
          - listprice
          - "-listprice"
          - listdate
          - "-listdate"
          - beds
          - "-beds"
          - baths
          - "-baths"
        description: |
          Sort the response by a specific field. Values starting
          with a minus (-) denote descending order, while the others
          are ascending.
      - items:
          type: string
        required: false
        in: query
        name: include
        collectionFormat: multi
        type: array
        description: |
          Include a extra fields which are not in the default
          response body
          - 'association' includes additional HOA data
          - 'agreement' information on the listing agreement
          - 'garageSpaces' additional garage data
          - 'maintenanceExpense' data on maintenance expenses
          - 'parking' additional parking data
          - 'pool' includes an additional pool description
          - 'taxAnnualAmount' include the annual tax amount
          - 'taxYear' include the tax year data
          - 'rooms' include parameter will include
             any additional rooms as a list.

          Note that your RETS vendor or MLS must provide these fields
          in their RETS data for them to be available in the API
          response.

          In the future, fields which require an 'include' may become available
          by default.
      security:
        - basicAuth: []
      description: 'This is the main endpoint for accessing openhouses.'
  "/openhouses/{openHouseKey}":
    get:
      summary: Single OpenHouse Endpoint
      responses:
        '403':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Authorization Required`.
        '400':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Bad Request`.
        '429':
          schema:
            "$ref": "#/definitions/Error"
          description: |
            Will send `Too Many Requests`. Please see our Service
            Level Agreement for more information on Request Rates and
            Acceptable Use.
        '200':
          schema:
            "$ref": "#/definitions/OpenHouse"
          description: |
            Will send `Authenticated` if authentication is succesful,
            otherwise it will send `Unauthorized`
        '500':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Internal Server Error`.
        '401':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Authentication Required`.
      parameters:
      - default: 189018
        format: int64
        required: true
        in: path
        name: openHouseKey
        type: integer
        description: A unique OpenHouse identification key
      - items:
          type: string
        required: false
        in: query
        name: include
        collectionFormat: multi
        type: array
        description: |
          Include a extra fields which are not in the default
          response body
          - 'association' includes additional HOA data
          - 'agreement' information on the listing agreement
          - 'garageSpaces' additional garage data
          - 'maintenanceExpense' data on maintenance expenses
          - 'parking' additional parking data
          - 'pool' includes an additional pool description
          - 'taxAnnualAmount' include the annual tax amount
          - 'taxYear' include the tax year data
          - 'rooms' include parameter will include
             any additional rooms as a list.

          Note that your RETS vendor or MLS must provide these fields
          in their RETS data for them to be available in the API
          response.

          In the future, fields which require an 'include' may
          become available by default.
      security:
        - basicAuth: []
      description: 'Use this endpoint for accessing a single OpenHouse.'
  "/properties/{mlsId}":
    get:
      summary: Single Listing Endpoint
      responses:
        '403':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Authorization Required`.
        '400':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Bad Request`.
        '429':
          schema:
            "$ref": "#/definitions/Error"
          description: |
            Will send `Too Many Requests`. Please see our Service
            Level Agreement for more information on Request Rates and
            Acceptable Use.
        '200':
          schema:
            "$ref": "#/definitions/Listing"
          description: |
            Will send `Authenticated` if authentication is succesful,
            otherwise it will send `Unauthorized`
        '500':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Internal Server Error`.
        '401':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Authentication Required`.
      parameters:
      - default: 1005252
        format: int64
        required: true
        in: path
        name: mlsId
        type: integer
        description: |
          The `mlsId` field is a unique identifier which is specific
          to the SimplyRETS API only.  This field is different from
          the `listingId` field (which is the public number given to
          a listing by the RETS vendor or MLS and is not used here).
      - items:
          type: string
        required: false
        in: query
        name: include
        collectionFormat: multi
        type: array
        enum:
          - association
          - agreement
          - garageSpaces
          - maintenanceExpense
          - parking
          - pool
          - rooms
        description: |
          Include a extra fields which are not in the default
          response body

          - `association` includes additional HOA data
          - `agreement` information on the listing agreement
          - `garageSpaces` additional garage data
          - `maintenanceExpense` data on maintenance expenses
          - `parking` additional parking data
          - `pool` includes an additional pool description
          - `rooms` include parameter will include
             any additional rooms as a list.

          Note that your RETS vendor or MLS must provide these fields
          in their RETS data for them to be available with valid data
          in the API response. If your MLS does not offer these fields,
          they will contain 'null'.

          In the future, fields which require an 'include' may become available
          by default.
      security:
        - basicAuth: []
      description: |
        Use this endpoint for accessing a single listing. When you
        make a search to the `/properties` endpoint, each listing in
        the response will contain a unique `mlsId` field which should
        be used to request that listing on this route.

        The `mlsId` field is a unique identifier for a listing which
        is specific to the SimplyRETS API only.  It is different from
        the `listingId` field is the public number given to a listing
        by the RETS vendor or MLS and is not used here.
  "/properties":
    get:
      summary: The SimplyRETS Listings API
      responses:
        '403':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Authorization Required`.
        '400':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Bad Request`.
        '429':
          schema:
            "$ref": "#/definitions/Error"
          description: |
            Will send `Too Many Requests`. Please see our Service
            Level Agreement for more information on Request Rates and
            Acceptable Use.
        '200':
          schema:
            items:
              "$ref": "#/definitions/Listing"
            type: array
          headers:
            Link:
              type: string
              description: A set of pagination headers provided by the SimplyRETS
                API.
            X-Total-Count:
              type: timestamp
              description: |
                The total number of listings that match this search, even
                if they can't be returned due to the API maximum response
                limit. In many cases this number will be higher than the
                total number of listings included in the response body.
            X-SimplyRETS-LastUpdate:
              type: timestamp
              description: The last time a listing refresh was run for the RETS feed
                associated w/ this API request.
          description: |
            Will send `Authenticated` if authentication is succesful,
            otherwise it will send `Unauthorized`.
        '500':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Internal Server Error`.
        '401':
          schema:
            "$ref": "#/definitions/Error"
          description: Will send `Authentication Required`.
      parameters:
      - required: false
        in: query
        name: q
        type: string
        description: |
          A textual keyword search. This parameter will search  the following
          fields, when available:

            - listingId (This does _not_ search the `mlsId` field in the SimplyRETS response body)
            - street number
            - street name
            - mls area (major)
            - city
            - subdivision name
            - postal code

          The `q` parameter can be specified multiple times in a
          query. For example, `q=Houston&q=mlsid_12345`.
      - items:
          type: string
        required: false
        in: query
        name: status
        collectionFormat: multi
        type: array
        enum:
          - Active
          - Pending
          - Closed
          - ActiveUnderContract
          - Hold
          - Withdrawn
          - Expired
          - Delete
          - Incomplete
          - ComingSoon
        description: |
          Request listings by a specific status. This parameter
          defaults to active and you can specify multiple statuses
          in a single query.

          Listing statuses depend on your RETS vendor's field
          availability. Below is a brief description of each status
          with possible synonyms which may map to your RETS
          vendor-specific statuses.

          - *Active*: Active Listing which is still on the market
          - *ActiveUnderContract*: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent
          - *Pending*: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract
          - *Hold*: The listing has been withdrawn from the market, but a contract
            still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market
          - *Withdrawn*: The listing has been withdrawn from the market, but a contract
            still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market
          - *Closed*: The purchase agreement has been fulfilled or the lease
            agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale
          - *Expired*: The listing contract has expired
          - *Delete*: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap
          - *Incomplete*: The listing has not yet be completely entered and is not yet
            published in the MLS. Synonyms: Draft, Partially Complted
          - *ComingSoon*
      - items:
          type: string
        required: false
        in: query
        name: type
        collectionFormat: multi
        type: array
        enum:
          - residential
          - rental
          - multifamily
          - condominium
          - commercial
          - land
          - farm
        description: |
          Request listings by a specific property type. This
          defaults to Residential and Rental. You can specify
          multiple property types in a single query.
      - items:
          type: string
        required: false
        in: query
        name: subtype
        collectionFormat: multi
        type: array
        enum:
          - apartment
          - boatslip
          - singlefamilyresidence
          - deededparking
          - cabin
          - condominium
          - duplex
          - manufacturedhome
          - ownyourown
          - quadruplex
          - stockcooperative
          - townhouse
          - timeshare
          - triplex
          - manufacturedonland
        description: |
          Request listings by a specific property sub type.

          *NOTE* not all sub type filters are available for all vendors.
      - required: false
        in: query
        name: agent
        type: string
        description: |
          Filter the listings returned by the `listAgent` id.  Note, the
          Agent ID is provided by your RETS vendor or MLS.

          The co-listing agent is not included in this query parameter.
      - required: false
        in: query
        name: salesAgent
        type: string
        description: |
          Filter the listings returned by the `sales.agent` id.  Note, the
          Agent ID is provided by your RETS vendor or MLS.

          The co-sales or co-buyer's agent is not included in this query parameter.
      - items:
          type: string
        required: false
        in: query
        name: brokers
        collectionFormat: multi
        type: array
        description: |
          Filter the listings returned by brokerage with a Broker
          ID. For some MLS areas, this is the ListOfficeId (Listing
          Office ID).  You can specific multiple broker
          parameters. Note, this query parameter is only available
          if a Broker ID is provided by your RETS vendor or MLS.
      - required: false
        in: query
        name: minprice
        type: integer
        description: 'Filter listings by a minimum price.'
      - required: false
        in: query
        name: maxprice
        type: integer
        description: 'Filter listings by a maximum price'
      - required: false
        in: query
        name: minarea
        type: integer
        description: 'Filter listings by a minimum area size in Sq Ft.'
      - required: false
        in: query
        name: maxarea
        type: integer
        description: 'Filter listings by a maximum area size in Sq Ft.'
      - required: false
        in: query
        name: minbaths
        type: integer
        description: 'Filter listings by a minimum number of bathrooms.'
      - required: false
        in: query
        name: maxbaths
        type: integer
        description: 'Filter listings by a maximum number of bathrooms.'
      - required: false
        in: query
        name: minbeds
        type: integer
        description: 'Filter listings by a minimum number of bedrooms.'
      - required: false
        in: query
        name: maxbeds
        type: integer
        description: 'Filter listings by a maximum number of bedrooms.'
      - required: false
        in: query
        name: maxdom
        type: integer
        description: |
          Filter listings by a maximum number of days on market.  _Note
          that your RETS vendor or MLS must provide Days on Market data._
      - required: false
        in: query
        name: minyear
        type: integer
        description: 'Filter listings by a setting a minimum year built.'
      - required: false
        in: query
        name: limit
        type: integer
        description: |
          Set the number of listings to return in the response.
          This defaults to 20 listings, and can be a maximum of 500.
          To paginate through to the next page of listings, take a
          look at the `offset` parameter, or the Link in the HTTP
          Header.
      - required: false
        in: query
        name: offset
        type: integer
        description: |
          Increase the offset parameter by the limit to go to the
          next "page" of listings. Also take a look at the Link HTTP
          Header for pre-built pagination.

          *NOTE:* Use the `lastId` field to paginate response

          *NOTE:* If you're offset is too high, you will receive an
          `HTTP 400 offset too high` error message.
      - required: false
        in: query
        name: lastId
        type: integer
        description: |
          Used as a cursor for pagination. When using `lastId`, the `sort` parameter
          will not work.
      - required: false
        in: query
        name: vendor
        type: string
        description: |
          Used to specify the RETS vendor to search from. This
          parameter is required on multi-MLS apps. You can query one
          vendor at a time. To get your vendor id's make an HTTP
          OPTIONS request to https://api.simplyrets.com.

          `curl -XOPTIONS https://api.simplyrets.com/properties`
      - items:
          type: string
        required: false
        in: query
        name: postalCodes
        collectionFormat: multi
        type: array
        description: |
          Filter the listings returned by postal codes / zip
          code. You can specify multiple.
      - items:
          type: string
        required: false
        in: query
        name: features
        collectionFormat: multi
        type: array
        description: |
          Filter the listings by specific interior features.  You
          can filter by multiple. For example, to filter trial listings
          by multiple features you can use,
          Return listings that are within a set of latitude
          longitude coordinates. For example,

          ```
          Wet Bar
          High Ceiling
          ```

          e.g. `https://simplyrets.com/services?features=Wet%20Bar&features=High%20Ceiling`

          The list of `features` provided by your RETS vendor or MLS
          can be seen by sending an `OPTIONS` request to the
          `/properties` endpoint:

          `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/properties`
      - required: false
        in: query
        name: water
        type: string
        description: |
          Query water/waterfront listings only. Specify `true` to
          filter waterfront listings.

          If you specify `water=true`, all listings with any `waterfront` value
          will be queried.

          If you specify `water=false`, listings which are **NOT** waterfront
          listings will be queried.

          If you specify `water=LAKE+NAME` or another valid value contained in
          your feed, that value will be searched
      - items:
          type: string
        required: false
        in: query
        name: neighborhoods
        collectionFormat: multi
        type: array
        description: |
          Filter the listings returned by specific neighborhoods and
          subdivisions. You can specify multiple `neighborhoods` by
          using the query parameter multiple times.

          The `neighborhoods` query parameter is case-insensitive.

          The list of `neighborhoods` provided by your RETS vendor or
          MLS can be seen by sending an `OPTIONS` request to the
          `/properties` endpoint:

          `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/properties`
      - items:
          type: string
        required: false
        in: query
        name: cities
        collectionFormat: multi
        type: array
        description: |
          Filter the listings returned by specific cities. You can
          specify multiple `cities` query parameters.

          The `cities` query parameter is case-insensitive.

          The list of `cities` provided by your RETS vendor or MLS can
          be seen by sending an `OPTIONS` request to the `/properties`
          endpoint:

          `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/openhouses`
      - items:
          type: string
        required: false
        in: query
        name: counties
        collectionFormat: multi
        type: array
        description: |
          Filter the listings returned by specific counties. You can
          specify multiple `counties` parameters.

          The `counties` query parameter is case-insensitive.

          The list of `counties` provided by your RETS vendor or MLS
          can be seen by sending an `OPTIONS` request to the
          `/properties` endpoint:

          `curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/openhouses`
      - items:
          type: string
        required: false
        in: query
        name: points
        collectionFormat: multi
        type: array
        description: |
          Return listings that are within a set of latitude
          longitude coordinates. For example;
          ```
          29.723837,-95.69778
          29.938275,-95.69778
          29.938275,-95.32974
          29.723837,-95.32974
          ```

          Note that some RETS vendors do not provide latitude and
          longitude with their listings, which is required for this
          parameter to work. In these cases, SimplyRETS offers a
          [Geocoding Addon](https://simplyrets.com/services#geocoding).

          Check out our
          [blog post](https://simplyrets.com/blog/interactive-map-search.html)
          on using the `points` parameter to build a map-based app
          in javascript.
      - items:
          type: string
        required: false
        in: query
        name: include
        collectionFormat: multi
        type: array
        enum:
          - association
          - agreement
          - garageSpaces
          - maintenanceExpense
          - parking
          - pool
          - rooms
          - taxYear
          - taxAnnualAmount
        description: |
          Include a extra fields which are not in the default
          response body
          - 'association' includes additional HOA data
          - 'agreement' information on the listing agreement
          - 'garageSpaces' additional garage data
          - 'maintenanceExpense' data on maintenance expenses
          - 'parking' additional parking data
          - 'pool' includes an additional pool description
          - 'taxAnnualAmount' include the annual tax amount
          - 'taxYear' include the tax year data
          - 'rooms' include parameter will include
             any additional rooms as a list.

          Note that your RETS vendor or MLS must provide these fields
          in their RETS data for them to be available in the API
          response.

          In the future, fields which require an 'include' may become available
          by default.
      - required: false
        in: query
        name: sort
        type: string
        enum:
          - listprice
          - "-listprice"
          - listdate
          - "-listdate"
          - beds
          - "-beds"
          - baths
          - "-baths"
        description: |
          Sort the response by a specific field. Values starting
          with a minus (-) denote descending order, while the others
          are ascending.
      - default: true
        required: false
        in: query
        name: count
        type: integer
        description: |
          When set to `false`, The `X-Total-Count` header will not
          be returned

          Counting the listings can contribute to slower API calls
          due to the extra queries that need to be run to get an
          exact count.

          Disabling count can increase query speeds.
      security:
        - basicAuth: []
      description: |
        This is the main endpoint for accessing your properties. View
        all of the available query parameters and make requests below!
        The API uses Basic Authentication, which most HTTP libraries
        will handle for you. To use the test data (which is what this
        pages uses), you can use the api key `simplyrets` and secret
        `simplyrets`. Note that these test listings are not live RETS
        listings but the data, query parameters, and response bodies
        will all work the same.
