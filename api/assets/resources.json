{
  "consumes": [
    "application/json"
  ],
  "swagger": "2.0",
  "basePath": "/",
  "securityDefinitions": {
    "basicAuth": {
      "in": "header",
      "name": "Authorization",
      "type": "basic",
      "description": "HTTP Basic Authentication. Works over `HTTPS` only"
    }
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json",
    "application/vnd.simplyrets-v0.1+json"
  ],
  "host": "api.simplyrets.com",
  "info": {
    "version": "1.0.0",
    "title": "SimplyRETS API",
    "description": "The SimplyRETS API is an exciting step towards making it easier for\ndevelopers and real estate agents to build something awesome with\nreal estate data!\n\nThe documentation below makes live requests to our API using the trial\ndata. To get set up with the API using live RETS data, you must have\nRETS credentials from your RETS vendor or MLS, which you can then use\nto create an app with SimplyRETS. For more information on that\nprocess, please see our [Getting\nStarted Guide](https://simplyrets.com/blog/getting-set-up.html), [FAQ](https://simplyrets.com/faq), or\n[contact us](https://simplyrets.com/\\#home-contact).\n\nBelow you'll find the API endpoints, query parameters, response bodies,\nand other information about using the SimplyRETS API. You can run\nqueries by clicking the 'Try it Out' button at the bottom of each\nsection. Check out the [help topics](/#topics) for more tips and examples on things like [IDX compliance features](/topics/fields-and-features-for-idx-compliance) and [versioning API requests](/topics/versioning-api-requests-with-media-types).\n\n### Authentication\nThe SimplyRETS API uses Basic Authentication. When you create an\napp, you'll get a set of API credentials to access your\nlistings. If you're trying out the test data, you can use\n`simplyrets:simplyrets` for connecting to the API.\n\n### Pagination\n\nTo paginate through listings, start your query with these\nparameters: 'limit=500&lastId=0'. The 'lastId' is the important\npart, you can use any limit up to 500. When you receive the\nresponse from the API with the results, check the 'Link' header for\nthe 'next' link. That link is pre-built to access the next 'page'\nof listings. Alternatively, you can use the last listing's 'mlsId'\nfrom the previous request and use that in the next query. For\nexample:\n\nFirst query:\n\ncurl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=0'\n\nIf the 'mlsId' in the last listing of the results is '1234567', then the next query will be:\n\ncurl -u username:password 'https://api.simplyrets.com/properties?limit=500&lastId=1234567'\n\n...and so one until you have reached the final page of listings.\n\nThere a few pieces of useful information about each request stored\nin the HTTP Headers:\n\n- `X-Total-Count` shows you the total amount of listings that match\n  your current query.\n- `Link` contains pre-built pagination links for accessing the next\n'page' of listings that match your query.\n\n"
  },
  "definitions": {
    "Room": {
      "type": "object",
      "description": "Sales Data",
      "properties": {
        "length": {
          "format": "float",
          "type": "number"
        },
        "featuers": {
          "type": "string",
          "description": "A set of features in the room."
        },
        "area": {
          "format": "float",
          "type": "number",
          "description": "The area of the room in units provided by the RETS vendor."
        },
        "width": {
          "format": "float",
          "type": "number"
        },
        "typeText": {
          "type": "string",
          "description": "Entire raw value of of the room `Type` data provided in the\nRETS feed.\n"
        },
        "type": {
          "type": "string",
          "description": "The `RoomType` RESO Data Dictionary 1.6 type."
        },
        "dimensions": {
          "type": "string",
          "description": "Room dimension textual value."
        },
        "description": {
          "type": "string",
          "description": "A description of the room."
        }
      }
    },
    "StreetAddress": {
      "type": "object",
      "description": "RETS Street Address",
      "properties": {
        "crossStreet": {
          "type": "string",
          "description": "Known cross street"
        },
        "state": {
          "type": "string",
          "description": "State or province. Maps to the data dictionary field `StateOrProvince`."
        },
        "country": {
          "type": "string",
          "description": "Street address country (United States or Canada)"
        },
        "postalCode": {
          "type": "string",
          "description": "Street Address postal code"
        },
        "streetName": {
          "type": "string",
          "description": "Name of the street"
        },
        "streetNumberText": {
          "type": "string",
          "description": "Textual representation of the street number. This field\nis usually redundant with what's in `streetNumber` but is\noccassionally usefuly for street number which are actually\nalpha-numerical. For example, \"N63453\" or \"34556B\".\n\n**Added on 2016/05/02**\n"
        },
        "city": {
          "type": "string",
          "description": "City name"
        },
        "streetNumber": {
          "format": "int64",
          "type": "integer",
          "description": "Street number"
        },
        "full": {
          "type": "string",
          "description": "Full pretty-printed address with suffix (if available)"
        },
        "unit": {
          "type": "string",
          "description": "Unit number"
        }
      }
    },
    "Property": {
      "type": "object",
      "description": "Rets Listing Property",
      "properties": {
        "rooms": {
          "schema": {
            "items": {
              "$ref": "#/definitions/Room"
            },
            "type": "array"
          },
          "description": "A comprehensive list of rooms. Room data is not included in the\nstandard payload.  Use `include=rooms` in your query to include\nroom data. If the list of rooms is empty, your RETS vendor may\nnot supply this information with your RETS feed.\n\nThis data is populated from 2 sources:\n\n  1. Inline room mappings in the `Property` resource\n\n  2. In an external RETS resource (e.g. `Room`)\n"
        },
        "roof": {
          "type": "string",
          "description": "Property roof description"
        },
        "cooling": {
          "type": "string",
          "description": "A description of the cooling or air conditioning features of the property."
        },
        "style": {
          "type": "string",
          "description": "Property style description or short string"
        },
        "area": {
          "format": "int64",
          "type": "integer",
          "description": "Square footage of the building associated with a listing"
        },
        "bathsFull": {
          "format": "int64",
          "type": "integer",
          "description": "Number of full bathrooms"
        },
        "bathsHalf": {
          "format": "int64",
          "type": "integer",
          "description": "Number of half bathrooms"
        },
        "stories": {
          "format": "float",
          "type": "number",
          "description": "Number of stories or levels. Represented as a `double' to\naccount for half stories.\n"
        },
        "fireplaces": {
          "format": "int64",
          "type": "integer",
          "description": "Number of fireplaces"
        },
        "flooring": {
          "type": "string",
          "description": "The type(s) of flooring found within the property."
        },
        "heating": {
          "type": "string",
          "description": "Heating description or short string"
        },
        "foundation": {
          "type": "string"
        },
        "poolFeatures": {
          "type": "string"
        },
        "laundryFeatures": {
          "type": "string"
        },
        "occupantName": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "lotDescription": {
          "type": "string"
        },
        "lotSizeAcres": {
          "format": "float",
          "type": "number",
          "description": "Lot size in acres\n\n**Added on 2016/05/04 - Not available for all RETS vendors**\n"
        },
        "subType": {
          "type": "string",
          "enum": [
            "Apartment",
            "BoatSlip",
            "SingleFamilyResidence",
            "DeededParking",
            "Cabin",
            "Condominium",
            "Duplex",
            "ManufacturedHome",
            "Quadruplex",
            "StockCooperative",
            "Townhouse",
            "Timeshare",
            "Triplex",
            "ManufacturedOnLand"
          ],
          "description": "A normalized representation of the listings sub-type.\n"
        },
        "bedrooms": {
          "format": "int64",
          "type": "integer",
          "description": "Number of bedrooms"
        },
        "interiorFeatures": {
          "type": "string",
          "description": "The properties interior features"
        },
        "lotSize": {
          "type": "string",
          "description": "Lot size dimensions or square footage as a text. This\nfield is generally used to show the pretty formatted\nlot size.\n"
        },
        "areaSource": {
          "type": "string"
        },
        "maintenanceExpense": {
          "format": "float",
          "type": "number",
          "description": "Yearly maintenance expense"
        },
        "additionalRooms": {
          "type": "string",
          "description": "Additional room information. This is a textual description\nof additional rooms for the listing.\n"
        },
        "exteriorFeatures": {
          "type": "string",
          "description": "Exterior Features for the listing\n"
        },
        "water": {
          "type": "string",
          "description": "The name, if known, of the body of water on which the\nproperty is located. (E.g., lake name, river name, ocean\nname, sea name, canal name). Otherwise, this field will\ncontain features of the waterfront on which the property is\nlocated.\n"
        },
        "view": {
          "type": "string",
          "description": "View details and description"
        },
        "lotSizeArea": {
          "format": "float",
          "type": "number",
          "description": "The total area of the lot.  See `lotSizeUnits` for the units\nof measurement (Square Feet, Square Meters, Acres, etc.).\n\n**Added on 2016/05/04 - Not available for all RETS vendors**\n"
        },
        "subdivision": {
          "type": "string",
          "description": "The subdivision or community name"
        },
        "construction": {
          "type": "string",
          "description": "The materials that were used in the construction of the property."
        },
        "subTypeRaw": {
          "type": "string",
          "description": "The raw text representation of the property sub type.\n"
        },
        "parking": {
          "$ref": "#/definitions/Parking"
        },
        "lotSizeAreaUnits": {
          "type": "string",
          "description": "Unit of measurement for the lotSizeArea field.  e.g. Square\nFeet, Square Meters, Acres, etc.\n\nIf this field is `null` the units is the default unit\nof measure specified by your RETS provider.\n\n**Added on 2016/05/04 - Not available for all RETS vendors**\n"
        },
        "type": {
          "type": "string",
          "enum": [
            "RES",
            "CND",
            "RNT",
            "MLF",
            "CRE",
            "LND",
            "FRM"
          ],
          "description": "Abbreviated property type. RES is Residential, CND is CondoOrTownhome,\nRNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land,\nFRM is Farm. See the `propertySubType` field for more information.\n"
        },
        "garageSpaces": {
          "format": "float",
          "type": "number",
          "description": "Number of garage spaces"
        },
        "bathsThreeQuarter": {
          "format": "int64",
          "type": "integer",
          "description": "Number of 3/4 bathrooms"
        },
        "accessibility": {
          "type": "string"
        },
        "occupantType": {
          "type": "string"
        },
        "yearBuilt": {
          "format": "int64",
          "type": "integer",
          "description": "Year the property was built"
        }
      }
    },
    "Listing": {
      "type": "object",
      "description": "RETS Listing Property",
      "properties": {
        "privateRemarks": {
          "type": "string",
          "description": "Agent only remarks"
        },
        "property": {
          "$ref": "#/definitions/Property",
          "description": "Specific property data associated with listing."
        },
        "mlsId": {
          "format": "int64",
          "type": "integer",
          "description": "A unique identifier for this listing specific to the\nSimplyRETS API. Thie identifier is specific to the\nSimplyRETS api and has no correlation with the MLS\nnumber. Use this id when making requests to the single\nlisting endpoint (eg, `/properties/{mlsId}`).\n\nApplications should not rely on specific `mlsId`s being\npresent. Instead, apps should dynamically use the `mlsId`\nafter using other more general query parameters. Many mls\nvendors require listings which are expired, terminated or\nsold to be purged, which will render calls to specific\n`mlsId`s to return nothing (or possibly a 404).\n"
        },
        "showingInstructions": {
          "type": "string",
          "description": "Public instructions for showing the property."
        },
        "showingContactName": {
          "type": "string",
          "description": "The name of the contact for the showing of the listed property."
        },
        "showingContactPhone": {
          "type": "string",
          "description": "Telephone number that should be called to arrange showing the property."
        },
        "office": {
          "$ref": "#/definitions/Office",
          "description": "Listing office or brokerage."
        },
        "leaseTerm": {
          "type": "string",
          "description": "Represents the length of the lease."
        },
        "disclaimer": {
          "type": "string",
          "description": "Data accuracy disclaimer. The value in the disclaimer may\nchange depending on the rules imposed by your RETS vendors.\n"
        },
        "address": {
          "$ref": "#/definitions/StreetAddress",
          "description": "Comprehensive property address information"
        },
        "listDate": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the listing became Active"
        },
        "agent": {
          "$ref": "#/definitions/Agent",
          "description": "Comprehensive listing agent information"
        },
        "modified": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time of the last modification"
        },
        "school": {
          "$ref": "#/definitions/School",
          "description": "Comprehensive school zone data"
        },
        "photos": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Photos of the property. Images are served over https and are\nsuitable for production use on secure websites\n"
        },
        "listPrice": {
          "format": "double",
          "type": "number",
          "description": "Price of the listing"
        },
        "listingId": {
          "type": "string",
          "description": "Data Dictionary v1.3 ListingId. The well known identifier for\nthe listing. The value is the id or number by the RETS vendor\nas a public identifier for the listing.\n\nThis identifier should not be confused with the `mlsId`, which is\nspecific to the SimplyRETS API.\n"
        },
        "mls": {
          "$ref": "#/definitions/MlsInformation",
          "description": "RETS vendor information and data"
        },
        "geo": {
          "$ref": "#/definitions/GeographicData",
          "description": "Geographic data for the listing"
        },
        "tax": {
          "$ref": "#/definitions/Tax",
          "description": "Associate tax data"
        },
        "coAgent": {
          "$ref": "#/definitions/Agent",
          "description": "co-listing agent information.\n\n*NOTE*: If your RETS feed stores co-list information outside\nof the `Property` resource, co-list agent information will not\nbe available.\n"
        },
        "sales": {
          "$ref": "#/definitions/Sales",
          "description": "Sales data"
        },
        "leaseType": {
          "type": "string",
          "description": "Information about the status of the existing lease on the property."
        },
        "virtualTourUrl": {
          "type": "string",
          "description": "The URL for an unbranded virtual tour of the property.\n\n**Added on 2016/05/04 - Not available for all RETS vendors**\n"
        },
        "remarks": {
          "type": "string",
          "description": "Description or remarks"
        },
        "association": {
          "$ref": "#/definitions/Association"
        }
      }
    },
    "OpenHouse": {
      "type": "object",
      "description": "SimplyRETS Open House object",
      "properties": {
        "refreshments": {
          "type": "string",
          "description": "Provided"
        },
        "listing": {
          "$ref": "#/definitions/Listing",
          "description": "The full listing associated with the OpenHouse"
        },
        "startTime": {
          "format": "date-time",
          "type": "string",
          "description": "Start Date for the open house"
        },
        "inputId": {
          "description": "The MLS number for the showing agent or agent which created the\nOpenHouse in the RETS database.\n"
        },
        "openHouseKey": {
          "type": "integer",
          "description": "A unique identifier for the open house which is specific to the\nSimplyRETS API\n"
        },
        "endTime": {
          "format": "date-time",
          "type": "string",
          "description": "The ending date time for the open house"
        },
        "openHouseId": {
          "type": "string",
          "description": "The MLS number or id provided by the RETS vendor or MLS.\n"
        },
        "type": {
          "type": "string",
          "description": "The open house type. For example, Public or Private"
        },
        "description": {
          "type": "string",
          "description": "The remarks and/or description details for the open house"
        }
      }
    },
    "Office": {
      "type": "object",
      "description": "RETS Office",
      "properties": {
        "contact": {
          "$ref": "#/definitions/ContactInformation",
          "description": "Associated contact details for the office. The availability of this\ninformation depends on your RETS vendor's rules and regulations\n\n*Contact information is not available for all RETS Vendors.*\n"
        },
        "name": {
          "type": "string",
          "description": "Pimary office name"
        },
        "servingName": {
          "type": "string",
          "description": "Primary office or brokerage name"
        },
        "brokerid": {
          "type": "string",
          "description": "Office or brokerage MLS identifier\n\n**Not available for all RETS vendors**\n"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "Error information",
      "properties": {
        "error": {
          "format": "int32",
          "type": "integer",
          "description": "Error code. In general, we try to adhere to HTTP status code\nand use these error statuses for detailed reporting.\n"
        },
        "message": {
          "type": "string",
          "description": "Status message with an explanation of the error"
        }
      }
    },
    "Agent": {
      "type": "object",
      "description": "SimplyRETS Agent Api",
      "properties": {
        "lastName": {
          "type": "string",
          "description": "Agent last name"
        },
        "contact": {
          "$ref": "#/definitions/ContactInformation",
          "description": "Agent contact info. This information is only present when\nyour RETS feed specifies the agent wishes to show their\ncontact information publicly.\n\n*Contact information is not available for all RETS Vendors.*\n"
        },
        "firstName": {
          "type": "string",
          "description": "Agent first name"
        },
        "id": {
          "type": "string",
          "description": "Well known Agent MLS number or id."
        }
      }
    },
    "School": {
      "type": "object",
      "description": "RETS School Data",
      "properties": {
        "middleSchool": {
          "type": "string",
          "description": "Middle or junior school name"
        },
        "highSchool": {
          "type": "string",
          "description": "High school name"
        },
        "elementarySchool": {
          "type": "string",
          "description": "Elementary school name."
        },
        "district": {
          "type": "string",
          "description": "School district name."
        }
      }
    },
    "ContactInformation": {
      "type": "object",
      "description": "RETS Contact Information",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email address of the `ContactInformation`\n\n**Not available for all RETS vendors**\n"
        },
        "office": {
          "type": "string",
          "description": "Contact Information Office Phone Number\n\n**Not available for all RETS vendors**\n"
        },
        "cell": {
          "type": "string",
          "description": "Contact Information Cell Phone\n\n**Not available for all RETS vendors**\n"
        }
      }
    },
    "Tax": {
      "type": "object",
      "description": "RETS Tax Data",
      "properties": {
        "taxYear": {
          "format": "int64",
          "type": "integer",
          "description": "Tax Year"
        },
        "taxAnnualAmount": {
          "type": "integer",
          "description": "Annual tax amount in USD"
        },
        "id": {
          "type": "string",
          "description": "Tax Parcel ID for the listing"
        }
      }
    },
    "Parking": {
      "type": "object",
      "description": "RETS School Data",
      "properties": {
        "leased": {
          "type": "string"
        },
        "spaces": {
          "type": "integer",
          "description": "Number of parking spaces"
        },
        "description": {
          "type": "string",
          "description": "Parking features description"
        }
      }
    },
    "Sales": {
      "type": "object",
      "description": "Sales Data",
      "properties": {
        "closeDate": {
          "format": "date-time",
          "type": "string",
          "description": "RETS Sales data close date"
        },
        "office": {
          "type": "string",
          "description": "RETS Sales data selling office/brokerage id"
        },
        "closePrice": {
          "format": "int64",
          "type": "integer",
          "description": "RETS Sales data sold price"
        },
        "agent": {
          "type": "string",
          "description": "RETS Sales data agent id"
        },
        "contractDate": {
          "format": "date-time",
          "type": "string",
          "description": "RETS Sales data contract date"
        }
      }
    },
    "GeographicData": {
      "type": "object",
      "description": "RETS Geographic Data",
      "properties": {
        "county": {
          "type": "string",
          "description": "Listing county"
        },
        "lat": {
          "format": "double",
          "type": "number",
          "description": "Listing latitude (if available)"
        },
        "lng": {
          "format": "double",
          "type": "number",
          "description": "Listing longitude (if available)"
        },
        "marketArea": {
          "type": "string",
          "description": "Listing GeoMarket area. May be the same as mlsArea"
        },
        "directions": {
          "type": "string",
          "description": "Directions to the property"
        }
      }
    },
    "Broker": {
      "type": "object",
      "description": "SimplyRETS Broker Api",
      "properties": {
        "startdate": {
          "format": "date-time",
          "type": "string",
          "description": "Start Date"
        }
      }
    },
    "MlsInformation": {
      "type": "object",
      "description": "RETS Vendor Data",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "ActiveUnderContract (Backup-Offer)",
            "Pending",
            "Hold",
            "Withdrawn",
            "Closed",
            "Expired",
            "Delete",
            "Incomplete",
            "ComingSoon"
          ],
          "description": "\nNormalized [RESO Data Dictionary 1.6]() standard status value. Compliant with data dictionary\nv1.6 `ListingStatus`. Listing status availability depends on your RETS vendor's\navailability. Below is a brief description of each status\nwith possible synonyms which may map to your MLS-specific\nstatuses\n\n- Active: Active Listing which is still on the market\n- ActiveUnderContract: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent\n- Pending: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract\n- Hold: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- Withdrawn: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- Closed: The purchase agreement has been fulfilled or the lease\n  agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale\n- Expired: The listing contract has expired\n- Delete: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap\n- Incomplete: The listing has not yet be completely entered and is not yet\n  published in the MLS. Synonyms: Draft, Partially Complted\n- ComingSoon\n"
        },
        "area": {
          "type": "string",
          "description": "MLS Area major. The major marketing area name, as defined by the MLS or other non-governmental organization."
        },
        "daysOnMarket": {
          "format": "int64",
          "type": "integer",
          "description": "Amount of days the property has been Active"
        },
        "originatingSystemName": {
          "type": "string",
          "description": "Alias for the listing office or brokerage\n\nThis field corresponds to the data-dictionary `OriginatingSystemName` field\n\nThe name of the originating record provider.  Most commonly\nthe name of the MLS. The place where the listing is\noriginally input by the member.  The legal name of the\ncompany.  To be used for display.\n\nIf you're data provider aggregates feeds from multiple other\nRETS vendors, this will be the name of the originating RETS\nvendor.\n"
        },
        "statusText": {
          "type": "string",
          "description": "Raw MLS status text. This `field` comes directly from your RETS data\nfield and is not normalized.\n"
        },
        "areaMinor": {
          "type": "string",
          "description": "MLS Area minor. The minor/sub marketing area name, as defined by the MLS or other non-governmental organization."
        }
      }
    },
    "Association": {
      "type": "object",
      "description": "Home Owners Association",
      "properties": {
        "fee": {
          "type": "integer",
          "description": "Association fee"
        },
        "name": {
          "type": "string",
          "description": "Name of the association"
        },
        "amenities": {
          "type": "string",
          "description": "Any extra amenities granted by the HOA"
        }
      }
    }
  },
  "paths": {
    "/openhouses": {
      "get": {
        "summary": "The SimplyRETS OpenHouses API",
        "responses": {
          "403": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Authorization Required`."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Bad Request`."
          },
          "429": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/OpenHouse"
              },
              "type": "array"
            },
            "description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`.\n"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Internal Server Error`."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Authentication Required`."
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "name": "type",
            "collectionFormat": "multi",
            "type": "string",
            "enum": [
              "residential",
              "rental",
              "multifamily",
              "condominium",
              "commercial",
              "land",
              "farm"
            ],
            "description": "Request listings by a specific property type. This\ndefaults to Residential, and you can only specify one type\nin a single query.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "listingId",
            "type": "string",
            "description": "Request openhouses for a specific `listingId`.\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "cities",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Filter the openhouses returned by a list of valid cities.\n\nThe `cities` query parameter is case-insensitive.\n\nThe list of `cities` provided by your RETS vendor or MLS can\nbe seen by sending an `OPTIONS` request to the `/properties`\nendpoint:\n\n`curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/openhouses`\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "brokers",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Filter the listings returned by brokerage with a Broker ID.\nYou can specific multiple broker parameters. Note, the Broker\nID is provided by your RETS vendor or MLS.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "agent",
            "type": "string",
            "description": "Filter the listings returned by an agent ID.  Note, the\nAgent ID is provided by your RETS vendor or MLS.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "minprice",
            "type": "integer",
            "description": "Filter listings by a minimum price.\n"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "startdate",
            "type": "string",
            "description": "Scheduled date and time of the open house showing"
          },
          {
            "required": false,
            "in": "query",
            "name": "offset",
            "type": "integer",
            "description": "Increase the offset parameter by the limit to go to the\nnext \"page\" of listings. Also take a look at the Link HTTP\nHeader for pre-built pagination.\n\n*NOTE:* Use the `lastId` parameter for pagination.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "lastId",
            "type": "integer",
            "description": "Used as a cursor for pagination.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "Set the number of listings to return in the response.\nThis defaults to 20 listings, and can be a maximum of 500.\nTo paginate through to the next page of listings, take a\nlook at the `offset` parameter, or the Link in the HTTP\nHeader.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "sort",
            "type": "string",
            "enum": [
              "listprice",
              "-listprice",
              "listdate",
              "-listdate",
              "beds",
              "-beds",
              "baths",
              "-baths"
            ],
            "description": "Sort the response by a specific field. Values starting\nwith a minus (-) denote descending order, while the others\nare ascending.\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "include",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Include a extra fields which are not in the default response body. Available values:\n\n - `rooms`: include parameter will include any additional rooms as a list.\n\nNote that your RETS vendor or MLS must provide these\nfields in their RETS data for them to be available in the\nAPI response. In the future, fields which require an\n`include` may become available by default."
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "This is the main endpoint for accessing openhouses.\n"
      }
    },
    "/openhouses/{openHouseKey}": {
      "get": {
        "summary": "Single OpenHouse Endpoint",
        "responses": {
          "403": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Authorization Required`."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Bad Request`."
          },
          "429": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/OpenHouse"
            },
            "description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`\n"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Internal Server Error`."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Authentication Required`."
          }
        },
        "parameters": [
          {
            "default": 189018,
            "format": "int64",
            "required": true,
            "in": "path",
            "name": "openHouseKey",
            "type": "integer",
            "description": "A unique OpenHouse identification key"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "include",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Include a extra fields which are not in the default\nresponse body\n- 'association' includes additional HOA data\n- 'agreement' information on the listing agreement\n- 'garageSpaces' additional garage data\n- 'maintenanceExpense' data on maintenance expenses\n- 'parking' additional parking data\n- 'pool' includes an additional pool description\n- 'taxAnnualAmount' include the annual tax amount\n- 'taxYear' include the tax year data\n- 'rooms' include parameter will include\n   any additional rooms as a list.\n\nNote that your RETS vendor or MLS must provide these fields\nin their RETS data for them to be available in the API\nresponse.\n\nIn the future, fields which require an 'include' may\nbecome available by default.\n"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Use this endpoint for accessing a single OpenHouse.\n"
      }
    },
    "/properties/{mlsId}": {
      "get": {
        "summary": "Single Listing Endpoint",
        "responses": {
          "403": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Authorization Required`."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Bad Request`."
          },
          "429": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Listing"
            },
            "description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`\n"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Internal Server Error`."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Authentication Required`."
          }
        },
        "parameters": [
          {
            "default": 1005252,
            "format": "int64",
            "required": true,
            "in": "path",
            "name": "mlsId",
            "type": "integer",
            "description": "The `mlsId` field is a unique identifier which is specific\nto the SimplyRETS API only.  This field is different from\nthe `listingId` field (which is the public number given to\na listing by the RETS vendor or MLS and is not used here).\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "include",
            "collectionFormat": "multi",
            "type": "array",
            "enum": [
              "association",
              "agreement",
              "garageSpaces",
              "maintenanceExpense",
              "parking",
              "pool",
              "rooms"
            ],
            "description": "Include a extra fields which are not in the default\nresponse body\n\n- `association` includes additional HOA data\n- `agreement` information on the listing agreement\n- `garageSpaces` additional garage data\n- `maintenanceExpense` data on maintenance expenses\n- `parking` additional parking data\n- `pool` includes an additional pool description\n- `rooms` include parameter will include\n   any additional rooms as a list.\n\nNote that your RETS vendor or MLS must provide these fields\nin their RETS data for them to be available with valid data\nin the API response. If your MLS does not offer these fields,\nthey will contain 'null'.\n\nIn the future, fields which require an 'include' may become available\nby default.\n"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Use this endpoint for accessing a single listing. When you\nmake a search to the `/properties` endpoint, each listing in\nthe response will contain a unique `mlsId` field which should\nbe used to request that listing on this route.\n\nThe `mlsId` field is a unique identifier for a listing which\nis specific to the SimplyRETS API only.  It is different from\nthe `listingId` field is the public number given to a listing\nby the RETS vendor or MLS and is not used here.\n"
      }
    },
    "/properties": {
      "get": {
        "summary": "The SimplyRETS Listings API",
        "responses": {
          "403": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Authorization Required`."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Bad Request`."
          },
          "429": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Listing"
              },
              "type": "array"
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "A set of pagination headers provided by the SimplyRETS API."
              },
              "X-Total-Count": {
                "type": "timestamp",
                "description": "The total number of listings that match this search, even\nif they can't be returned due to the API maximum response\nlimit. In many cases this number will be higher than the\ntotal number of listings included in the response body.\n"
              },
              "X-SimplyRETS-LastUpdate": {
                "type": "timestamp",
                "description": "The last time a listing refresh was run for the RETS feed associated w/ this API request."
              }
            },
            "description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`.\n"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Internal Server Error`."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Will send `Authentication Required`."
          }
        },
        "parameters": [
          {
            "required": false,
            "in": "query",
            "name": "q",
            "type": "string",
            "description": "A textual keyword search. This parameter will search  the following\nfields, when available:\n\n  - listingId (This does _not_ search the `mlsId` field in the SimplyRETS response body)\n  - street number\n  - street name\n  - mls area (major)\n  - city\n  - subdivision name\n  - postal code\n\nThe `q` parameter can be specified multiple times in a\nquery. For example, `q=Houston&q=mlsid_12345`.\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "status",
            "collectionFormat": "multi",
            "type": "array",
            "enum": [
              "Active",
              "Pending",
              "Closed",
              "ActiveUnderContract",
              "Hold",
              "Withdrawn",
              "Expired",
              "Delete",
              "Incomplete",
              "ComingSoon"
            ],
            "description": "Request listings by a specific status. This parameter\ndefaults to Active and Pending. You can specify multiple statuses\nin a single query.\n\nListing statuses depend on your RETS vendor's field\navailability. Below is a brief description of each status\nwith possible synonyms which may map to your RETS\nvendor-specific statuses.\n\n- *Active*: Active Listing which is still on the market\n- *ActiveUnderContract*: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent\n- *Pending*: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract\n- *Hold*: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- *Withdrawn*: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- *Closed*: The purchase agreement has been fulfilled or the lease\n  agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale\n- *Expired*: The listing contract has expired\n- *Delete*: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap\n- *Incomplete*: The listing has not yet be completely entered and is not yet\n  published in the MLS. Synonyms: Draft, Partially Complted\n- *ComingSoon*\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "type",
            "collectionFormat": "multi",
            "type": "array",
            "enum": [
              "residential",
              "rental",
              "multifamily",
              "condominium",
              "commercial",
              "land",
              "farm"
            ],
            "description": "Request listings by a specific property type. This\ndefaults to Residential and Rental. You can specify\nmultiple property types in a single query.\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "subtype",
            "collectionFormat": "multi",
            "type": "array",
            "enum": [
              "apartment",
              "boatslip",
              "singlefamilyresidence",
              "deededparking",
              "cabin",
              "condominium",
              "duplex",
              "manufacturedhome",
              "ownyourown",
              "quadruplex",
              "stockcooperative",
              "townhouse",
              "timeshare",
              "triplex",
              "manufacturedonland"
            ],
            "description": "Request listings by a specific property sub type.\n\n*NOTE* not all sub type filters are available for all vendors.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "agent",
            "type": "string",
            "description": "Filter the listings returned by the `listAgent` id.  Note, the\nAgent ID is provided by your RETS vendor or MLS.\n\nThe co-listing agent is not included in this query parameter.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "salesAgent",
            "type": "string",
            "description": "Filter the listings returned by the `sales.agent` id.  Note, the\nAgent ID is provided by your RETS vendor or MLS.\n\nThe co-sales or co-buyer's agent is not included in this query parameter.\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "brokers",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Filter the listings returned by brokerage with a Broker\nID. For some MLS areas, this is the ListOfficeId (Listing\nOffice ID).  You can specific multiple broker\nparameters. Note, this query parameter is only available\nif a Broker ID is provided by your RETS vendor or MLS.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "minprice",
            "type": "integer",
            "description": "Filter listings by a minimum price.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "maxprice",
            "type": "integer",
            "description": "Filter listings by a maximum price\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "minarea",
            "type": "integer",
            "description": "Filter listings by a minimum area size in Sq Ft.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "maxarea",
            "type": "integer",
            "description": "Filter listings by a maximum area size in Sq Ft.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "minbaths",
            "type": "integer",
            "description": "Filter listings by a minimum number of bathrooms.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "maxbaths",
            "type": "integer",
            "description": "Filter listings by a maximum number of bathrooms.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "minbeds",
            "type": "integer",
            "description": "Filter listings by a minimum number of bedrooms.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "maxbeds",
            "type": "integer",
            "description": "Filter listings by a maximum number of bedrooms.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "maxdom",
            "type": "integer",
            "description": "Filter listings by a maximum number of days on market.  _Note\nthat your RETS vendor or MLS must provide Days on Market data._\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "minyear",
            "type": "integer",
            "description": "Filter listings by a setting a minimum year built.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "maxyear",
            "type": "integer",
            "description": "Filter listings by a setting a maximum year built.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "minacres",
            "type": "integer",
            "description": "Filter listings by a setting a minimum acreage.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "maxacres",
            "type": "integer",
            "description": "Filter listings by a setting a maximum acreage.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "Set the number of listings to return in the response.\nThis defaults to 20 listings, and can be a maximum of 500.\nTo paginate through to the next page of listings, take a\nlook at the `offset` parameter, or the Link in the HTTP\nHeader.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "offset",
            "type": "integer",
            "description": "Increase the offset parameter by the limit to go to the\nnext \"page\" of listings. Also take a look at the Link HTTP\nHeader for pre-built pagination.\n\n*NOTE:* Use the `lastId` field to paginate response\n\n*NOTE:* If you're offset is too high, you will receive an\n`HTTP 400 offset too high` error message.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "lastId",
            "type": "integer",
            "description": "Used as a cursor for pagination. When using `lastId`, the `sort` parameter\nwill not work.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "vendor",
            "type": "string",
            "description": "Used to specify the RETS vendor to search from. This\nparameter is required on multi-MLS apps. You can query one\nvendor at a time. To get your vendor id's make an HTTP\nOPTIONS request to https://api.simplyrets.com.\n\n`curl -XOPTIONS https://api.simplyrets.com/properties`\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "postalCodes",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Filter the listings returned by postal codes / zip\ncode. You can specify multiple.\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "features",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Filter the listings by specific interior features.  You\ncan filter by multiple. For example, to filter trial listings\nby multiple features you can use,\nReturn listings that are within a set of latitude\nlongitude coordinates. For example,\n\n```\nWet Bar\nHigh Ceiling\n```\n\ne.g. `https://simplyrets.com/services?features=Wet%20Bar&features=High%20Ceiling`\n\nThe list of `features` provided by your RETS vendor or MLS\ncan be seen by sending an `OPTIONS` request to the\n`/properties` endpoint:\n\n`curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/properties`\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "water",
            "type": "string",
            "description": "Query water/waterfront listings only. Specify `true` to\nfilter waterfront listings.\n\nIf you specify `water=true`, all listings with any `waterfront` value\nwill be queried.\n\nIf you specify `water=false`, listings which are **NOT** waterfront\nlistings will be queried.\n\nIf you specify `water=LAKE+NAME` or another valid value contained in\nyour feed, that value will be searched\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "neighborhoods",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Filter the listings returned by specific neighborhoods and\nsubdivisions. You can specify multiple `neighborhoods` by\nusing the query parameter multiple times.\n\nThe `neighborhoods` query parameter is case-insensitive.\n\nThe list of `neighborhoods` provided by your RETS vendor or\nMLS can be seen by sending an `OPTIONS` request to the\n`/properties` endpoint:\n\n`curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/properties`\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "cities",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Filter the listings returned by specific cities. You can\nspecify multiple `cities` query parameters.\n\nThe `cities` query parameter is case-insensitive.\n\nThe list of `cities` provided by your RETS vendor or MLS can\nbe seen by sending an `OPTIONS` request to the `/properties`\nendpoint:\n\n`curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/openhouses`\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "counties",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Filter the listings returned by specific counties. You can\nspecify multiple `counties` parameters.\n\nThe `counties` query parameter is case-insensitive.\n\nThe list of `counties` provided by your RETS vendor or MLS\ncan be seen by sending an `OPTIONS` request to the\n`/properties` endpoint:\n\n`curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/openhouses`\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "points",
            "collectionFormat": "multi",
            "type": "array",
            "description": "Return listings that are within a set of latitude\nlongitude coordinates. For example;\n```\n29.723837,-95.69778\n29.938275,-95.69778\n29.938275,-95.32974\n29.723837,-95.32974\n```\n\nNote that some RETS vendors do not provide latitude and\nlongitude with their listings, which is required for this\nparameter to work. In these cases, SimplyRETS offers a\n[Geocoding Addon](https://simplyrets.com/services#geocoding).\n\nCheck out our\n[blog post](https://simplyrets.com/blog/interactive-map-search.html)\non using the `points` parameter to build a map-based app\nin javascript.\n"
          },
          {
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "include",
            "collectionFormat": "multi",
            "type": "array",
            "enum": [
              "association",
              "agreement",
              "garageSpaces",
              "maintenanceExpense",
              "parking",
              "pool",
              "rooms",
              "taxYear",
              "taxAnnualAmount"
            ],
            "description": "Include a extra fields which are not in the default\nresponse body\n- 'association' includes additional HOA data\n- 'agreement' information on the listing agreement\n- 'garageSpaces' additional garage data\n- 'maintenanceExpense' data on maintenance expenses\n- 'parking' additional parking data\n- 'pool' includes an additional pool description\n- 'taxAnnualAmount' include the annual tax amount\n- 'taxYear' include the tax year data\n- 'rooms' include parameter will include\n   any additional rooms as a list.\n\nNote that your RETS vendor or MLS must provide these fields\nin their RETS data for them to be available in the API\nresponse.\n\nIn the future, fields which require an 'include' may become available\nby default.\n"
          },
          {
            "required": false,
            "in": "query",
            "name": "sort",
            "type": "string",
            "enum": [
              "listprice",
              "-listprice",
              "listdate",
              "-listdate",
              "beds",
              "-beds",
              "baths",
              "-baths"
            ],
            "description": "Sort the response by a specific field. Values starting\nwith a minus (-) denote descending order, while the others\nare ascending.\n"
          },
          {
            "default": true,
            "required": false,
            "in": "query",
            "name": "count",
            "type": "integer",
            "description": "When set to `false`, The `X-Total-Count` header will not\nbe returned\n\nCounting the listings can contribute to slower API calls\ndue to the extra queries that need to be run to get an\nexact count.\n\nDisabling count can increase query speeds.\n"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "This is the main endpoint for accessing your properties. View\nall of the available query parameters and make requests below!\nThe API uses Basic Authentication, which most HTTP libraries\nwill handle for you. To use the test data (which is what this\npages uses), you can use the api key `simplyrets` and secret\n`simplyrets`. Note that these test listings are not live RETS\nlistings but the data, query parameters, and response bodies\nwill all work the same.\n"
      }
    }
  }
}
